apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'

sourceCompatibility = 1.7
targetCompatibility = 1.7

def timestamp = new java.text.SimpleDateFormat("yyyyMMddHHmmss").format(new Date());

def srcOriginal = "${sourceSets.main.classesDir}"

def STANDALONE_PACKAGING = true;
def APPLICATION_NAME = "videoConverter";
def XUGGLE_JAR_PATH = "/usr/local/xuggler/share/java/jars/xuggle-xuggler.jar"
// Root directory on demo environment, where will be hosted every targetEnvironment directories
def ENV_DEMO_DEPLOY_ROOT_PATH = "/home/bbeeg/dist";
// Demo connection properties
def ENV_DEMO_HOST = '91.121.39.83'

// System property used to skip upload of artefact during start* tasks
def SKIP_UPLOAD_SYS_PROPERTY = "deploy.skip.upload"
// System property used to define an XDebug java port to launch remote app in debug mode
def DEBUG_PORT_SYS_PROPERTY = "deploy.debug.port"

if(!hasProperty("releasesRepoUsername")
        || !hasProperty("releasesRepoPassword")){
    ant.fail "You should define a ~/.gradle/gradle.properties containing properties 'releasesRepoUsername' and 'releasesRepoPassword' to access 4SH releases repository !"
}

if(!hasProperty("bbeeg.videoConverter.username") || !hasProperty("bbeeg.videoConverter.password")){
    ant.fail "You should define a ~/.gradle/gradle.properties containing properties 'bbeeg.videoConverter.username' and 'bbeeg.videoConverter.password' to access BBEEG demo environnment !"
}

def ENV_DEMO_USER = getProperty("bbeeg.videoConverter.username");
def ENV_DEMO_PASS = getProperty("bbeeg.videoConverter.password");

def ENV_PROPERTIES = [
   qa: [
           targetDir: ENV_DEMO_DEPLOY_ROOT_PATH + "/qa/apps",
           inputDir: ENV_DEMO_DEPLOY_ROOT_PATH + "/qa/apps" + "/${APPLICATION_NAME}/in/",
           outputDir: ENV_DEMO_DEPLOY_ROOT_PATH + "/qa/apps" + "/${APPLICATION_NAME}/out/",
           errorDir: ENV_DEMO_DEPLOY_ROOT_PATH + "/qa/apps" + "/${APPLICATION_NAME}/error/",
           presetsFile: "/usr/local/xuggler/share/ffmpeg/libx264-ipod640.ffpreset",
           specificJavaOpts: "-Xmx512m"
   ]
]

group = "fr.fsh.videoConverter"
def versionBase = "1.0.beta"

// handles releases gracefully
gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(':release')) {
        version = versionBase
        versionForManifest = version
    } else {
        version = versionBase + '-SNAPSHOT'
        versionForManifest = versionBase + "-" + timestamp
    }
    jar {
        manifest {
            attributes 'Main-Class': 'fr.fsh.videoConverter.Main'
            attributes 'Class-Path': XUGGLE_JAR_PATH
            attributes 'Implementation-Title': APPLICATION_NAME
            attributes 'Implementation-Version': versionForManifest
            attributes 'Implementation-Vendor': '4SH France'
        }
    }
}

repositories {
    maven {
        credentials {
            username releasesRepoUsername
            password releasesRepoPassword
        }
        url "http://repo.4sh.fr/libs/"
    }
}

configurations {
    intTestCompile { extendsFrom testCompile }
    intTestRuntime { extendsFrom intTestCompile, runtime }
    ssh
}

dependencies {
    compile(
            fileTree('/usr/local/share/java/jars/xuggle-xuggler.jar'),
            [group: 'org.slf4j', name: 'slf4j-api', version: '1.5.6'],
            [group: 'com.beust', name:'jcommander', version: '1.17', transitive: true],
            [group: 'commons-cli', name:'commons-cli', version: '1.1']

    )
    runtime(
            [group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.0'],
            [group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.5.6']
    )

    testCompile(
            [group: 'junit', name: 'junit', version: '4.8.2', transitive: true],
    )
    ssh 'org.apache.ant:ant-jsch:1.7.0'
}

sourceSets {
    intTest {
        compileClasspath = sourceSets.main.classes + configurations.intTestCompile
        runtimeClasspath = classes + sourceSets.main.classes + configurations.intTestRuntime
        java {
            srcDir "src/integration-test/java"
        }
        resources {
            srcDir "src/integration-test/resources"
        }
    }
}

// Allows to generate USER_HOME idea variable uniformely on every OS
ideaModule {
    variables.put("USER_HOME", file(System.getProperty("user.home")))
}

if (STANDALONE_PACKAGING) {
    jar {
        // Convert every jars in a fatjar
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        exclude("com/xuggle/**")
    }

    sourceSets {
        main {
            resources {
                srcDir "src/main/java"
            }
        }
    }
}

task initSsh << {
    ant.taskdef(name: 'scp2',
    	classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
    	classpath: configurations.ssh.asPath)
    ant.taskdef(name: 'ssh',
    	classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
    	classpath: configurations.ssh.asPath)
}

task uploadOnDemo(dependsOn: [initSsh, test, build]) << {
    if(!"true".equals(System.properties[SKIP_UPLOAD_SYS_PROPERTY])){
        def deployDirectory = ENV_PROPERTIES["qa"].targetDir + "/" + APPLICATION_NAME

        println "Deploying videoConverter to $deployDirectory"

        def libFiles = file(libsDir).listFiles().findAll { it =~ "\\.jar\$" }
        libFiles.each { File f ->
            println "Uploading ${f.name} (${f.size()/1000000} Mo) ..."

            ant.scp2(file: f,
                    remoteTofile: "${ENV_DEMO_USER}:${ENV_DEMO_PASS}@${ENV_DEMO_HOST}:${deployDirectory}/${APPLICATION_NAME}.jar",
                    port: 2224,
                    trust: true,
                    verbose: true
            )
        }
    } else {
        println "Upload of Video converter skipped !"
    }
}

task startVideoConverter(dependsOn: [initSsh]) << {
    def targetEnv = ENV_PROPERTIES["qa"]
    def deployDirectory = targetEnv.targetDir + "/" + APPLICATION_NAME
    def specificJavaOpts = targetEnv.specificJavaOpts
    def inputDir = targetEnv.inputDir;
    def outputDir = targetEnv.outputDir;
    def errorDir = targetEnv.errorDir;
    def presetsFile = targetEnv.presetsFile;
    def nativeLibs = "/usr/local/xuggler/lib/"
    def java7Home = "/usr/lib/jvm/jdk1.7.0_01/"
    def javaOpts = "-Xms256m -Dfile.encoding=UTF-8 ${specificJavaOpts} -Djava.library.path=${nativeLibs}"

    if(System.properties[DEBUG_PORT_SYS_PROPERTY] != null
        && !"".equals(System.properties[DEBUG_PORT_SYS_PROPERTY])){
        javaOpts += " -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address="+System.properties[DEBUG_PORT_SYS_PROPERTY]+" -Xnoagent -Djava.compiler=NONE"
    }

    ant.ssh(host: ENV_DEMO_HOST, username: ENV_DEMO_USER, password: ENV_DEMO_PASS, port: 2224,
		command: """kill -9 \$(cat "${deployDirectory}/${APPLICATION_NAME}.pid")""", trust: true, failonerror: false)
    ant.ssh(host: ENV_DEMO_HOST, username: ENV_DEMO_USER, password: ENV_DEMO_PASS, port: 2224,
		command: """${java7Home}/jre/bin/java ${javaOpts} -jar "${deployDirectory}/${APPLICATION_NAME}.jar" \
		    -inputDir ${inputDir} -outputDir ${outputDir} -errorDir ${errorDir} -presetsFile ${presetsFile} \
		    > "${deployDirectory}/videoConverter.log" 2> "${deployDirectory}/${APPLICATION_NAME}.err.log" \
		    & echo \$! > "${deployDirectory}/videoConverter.pid" """,
        trust: true, failonerror: true)
}

task intTest(type: Test) {
    testClassesDir = sourceSets.intTest.classesDir
    classpath = sourceSets.intTest.runtimeClasspath
}
